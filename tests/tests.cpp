// Test definitions. Do NOT edit this file!

#include <tuple>

//#define CATCH_CONFIG_MAIN // defines main() automatically
#include "catch.hpp"
#include "../main.hpp"
#include <string.h>


// =====================
// tests for exercise 1
// ---------------------

TEST_CASE("Test1", "[Sieve]")
{
    int expected [31] = {0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0};
    int sieve [31]  = {0};
    eratosthenes(31,sieve);
    INFO("Testing primes between 0 and 30 failed.");
    for(int i = 0; i < 31; i++){
        REQUIRE(sieve[i] == expected[i]);
    }
}

TEST_CASE("Test2", "[Sieve]")
{
    int expected [3] = {0, 0, 1};
    int sieve [3]  = {0};
    eratosthenes(3,sieve);
    INFO("Testing primes between 0 and 2 failed.");
    for(int i = 0; i < 3; i++){
        REQUIRE(sieve[i] == expected[i]);
    }
}

// =====================
// tests for exercise 2
// ---------------------

TEST_CASE("Test3", "[InversionCount]")
{
    int expected [5] = {0};
    int numbers [5]  = {1,2,3,4,5};
    int inversions [5] = {1,1,1,1,1};
    inversionCount(5,numbers,inversions);
    INFO("Testing inversions for numbers {1,2,3,4,5} failed.");
    for(int i = 0; i < 5; i++){
        REQUIRE(inversions[i] == expected[i]);
    }
}

TEST_CASE("Test4", "[InversionCount]")
{
    int numbers [5]  = {1,2,3,4,5};
    int inversions [5];
    int total = inversionCount(5,numbers,inversions);
    INFO("Testing total inversions for numbers {1,2,3,4,5} failed.");
    REQUIRE(total == 0);
}

TEST_CASE("Test5", "[InversionCount]")
{
    int expected [9] = {3,4,2,2,2,2,2,0,0};
    int numbers [9]  = {5,6,3,5,7,8,9,1,2};
    int inversions [9];
    inversionCount(9,numbers,inversions);
    INFO("Testing inversions for numbers {5,6,3,5,7,8,9,1,2} failed.");
    for(int i = 0; i < 9; i++){
        REQUIRE(inversions[i] == expected[i]);
    }
}

TEST_CASE("Test6", "[InversionCount]")
{
    int numbers [9]  = {5,6,3,5,7,8,9,1,2};
    int inversions [9];
    int total = inversionCount(9,numbers,inversions);
    INFO("Testing total inversions for numbers {5,6,3,5,7,8,9,1,2} failed.");
    REQUIRE(total == 17);
}

TEST_CASE("Test7", "[InversionCount]")
{
    int expected [1] = {0};
    int numbers [1]  = {1};
    int inversions [1] = {1};
    inversionCount(1,numbers,inversions);
    INFO("Testing inversions for numbers {1} failed.");
    for(int i = 0; i < 1; i++){
        REQUIRE(inversions[i] == expected[i]);
    }
}

TEST_CASE("Test8", "[InversionCount]")
{
    int numbers [1]  = {1};
    int inversions [1];
    int total = inversionCount(1,numbers,inversions);
    INFO("Testing total inversions for numbers {1} failed.");
    REQUIRE(total == 0);
}

// =====================
// tests for exercise 3
// ---------------------

TEST_CASE("Test9", "[MemSwap]")
{
    int data1[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int data2[10] = { 101, 234, 398, 434, 523, 616, 748, 856, 901, 133 };
    int comparison1[10];
    int comparison2[10];
    memcpy(comparison1,data1,sizeof(data1));
    memcpy(comparison2,data2,sizeof(data1));
    memswap((char*)data1, (char*)data2, sizeof(data1));
    INFO("Testing MemSwap on integer arrays failed.");
    for(int i = 0; i < 10; i++){
        REQUIRE(data1[i] == comparison2[i]);
        REQUIRE(data2[i] == comparison1[i]);
    }
}

TEST_CASE("Test10", "[MemSwap]")
{
    short data1[10] = { 0x7FFF, 2, 3, 4, 5, 6, 7, 8, 9, 0x7FFF};
    short data2[10] = { 101, 234, 398, 434, 523, 616, 748, 856, 901, 133 };
    short comparison1[10];
    short comparison2[10];
    memcpy(comparison1,data1,sizeof(data1));
    memcpy(comparison2,data2,sizeof(data1));
    memswap((char*)data1, (char*)data2, sizeof(data1));
    INFO("Testing MemSwap on short arrays failed.");
    for(int i = 0; i < 10; i++){
        REQUIRE(data1[i] == comparison2[i]);
        REQUIRE(data2[i] == comparison1[i]);
    }
}
